---
services:
  mongo:
    image: mongo:3.6
    container_name: mongo
    restart: always
    volumes:
      - type: volume
        source: db
        target: /data/db
      - type: volume
        source: dbcfg
        target: /data/configdb

  controller:
    image: "jacobalberty/unifi:${TAG:-latest}"
    container_name: controller
    depends_on:
      - mongo
    init: true
    user: unifi:unifi
    restart: always
    volumes:
      - type: volume
        source: unifi
        target: /unifi
      - type: volume
        source: data
        target: /unifi/data
      - type: volume
        source: cert
        target: /unifi/cert
      - type: volume
        source: log
        target: /unifi/log
      - type: volume
        source: init
        target: /unifi/init.d
      - type: volume
        source: run
        target: /var/run/unifi
        # Ideally, this would be a bind mount or other persistent volume.
        # See network-volume.yaml for examples.
      - type: volume
        source: backup
        target: /unifi/backup
    sysctls:
      net.ipv4.ip_unprivileged_port_start: 0
    environment:
      DB_URI: mongodb://mongo/unifi
      STATDB_URI: mongodb://mongo/unifi_stat
      DB_NAME: unifi
      TZ: "${TZ}"
    ports:
      - "3478:3478/udp" # STUN
      - "6789:6789/tcp" # Speed test
      - "8080:8080/tcp" # Device/ controller comm.
      - "8443:8443/tcp" # Controller GUI/API as seen in a web browser
      - "8880:8880/tcp" # HTTP portal redirection
      - "8843:8843/tcp" # HTTPS portal redirection
      - "10001:10001/udp" # AP discovery

  logs:
    image: bash
    container_name: logs
    depends_on:
      - controller
    command: bash -c 'tail -f /unifi/log/*.log'
    restart: always
    user: unifi:unifi
    volumes:
      - type: volume
        source: log
        target: /unifi/log

volumes:
  db:
  dbcfg:
  unifi:
  data:
  cert:
  log:
  init:
  run:

